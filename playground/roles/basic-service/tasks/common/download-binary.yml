---
- name: Ensure destination directory exists
  ansible.builtin.file:
    path: "{{ destination_directory }}"
    state: directory
    mode: "0755"

- name: Set Binary file name based on URL
  ansible.builtin.set_fact:
    binary_file_name: "{{ binary_url | basename }}"

- name: Download the binary file
  ansible.builtin.get_url:
    url: "{{ binary_url }}"
    dest: /tmp/{{ binary_file_name }}
    mode: "0755"

- name: Unarchive the file if it's an archive
  ansible.builtin.unarchive:
    src: /tmp/{{ binary_file_name }}
    dest: "{{ destination_directory }}"
    remote_src: true
  when: binary_file_name.endswith('.tar') or binary_file_name.endswith('.tar.gz') or binary_file_name.endswith('.tgz') or binary_file_name.endswith('.zip')

- name: Move the file if it's not an archive
  ansible.builtin.command: >
    mv /tmp/{{ binary_file_name }} {{ destination_directory }}/{{ binary_file_name_override|default(binary_file_name) }}
  when: >
    not (binary_file_name.endswith('.tar') or
         binary_file_name.endswith('.tar.gz') or
         binary_file_name.endswith('.tgz') or
         binary_file_name.endswith('.zip'))
  register: mv_output
  changed_when: mv_output.rc != 0

- name: Ensure the file has executable permissions
  ansible.builtin.file:
    path: "{{ destination_directory }}/{{ binary_file_name_override | default(binary_file_name) }}"
    mode: "0755"
  when: >
    not (binary_file_name.endswith('.tar') or
         binary_file_name.endswith('.tar.gz') or
         binary_file_name.endswith('.tgz') or
         binary_file_name.endswith('.zip'))
